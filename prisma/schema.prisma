generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  name          String
  email         String   @unique @db.VarChar(255)
  emailVerified Boolean  @default(false) @map("email_verified")
  password      String?  @db.VarChar(255)
  image         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  sessions Session[]
  accounts Account[]

  twoFactorEnabled Boolean?    @default(false) @map("two_factor_enabled")
  twofactors       TwoFactor[]

  passkeys Passkey[]

  lastLoginMethod String? @map("last_login_method")

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String @map("backup_codes")
  userId      String @map("user_id")
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String    @map("public_key")
  userId       String    @map("user_id")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String    @map("credential_id")
  counter      Int
  deviceType   String    @map("device_type")
  backedUp     Boolean   @map("backed_up")
  transports   String?
  createdAt    DateTime? @map("created_at")
  updatedAt    DateTime? @map("updated_at")
  aaguid       String?

  @@map("passkey")
}
